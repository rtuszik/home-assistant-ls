import { CompletionItem, CompletionList, Definition, DefinitionLink, Diagnostic, FormattingOptions, Hover, Position, SymbolInformation, TextDocument, TextEdit } from "vscode-languageserver-protocol";
import { LanguageService } from "yaml-language-server/out/server/src/languageservice/yamlLanguageService";
import { SchemaServiceForIncludes } from "./schemas/schemaService";
import { HaConnection } from "./home-assistant/haConnection";
import { DefinitionProvider } from "./definition/definition";
import { HomeAssistantConfiguration } from "./haConfig/haConfig";
import { IConfigurationService } from "./configuration";
export declare class HomeAssistantLanguageService {
    private yamlLanguageService;
    private haConfig;
    private haConnection;
    private definitionProviders;
    private schemaServiceForIncludes;
    private sendDiagnostics;
    private diagnoseAllFiles;
    private configurationService;
    private templateCache;
    private readonly CACHE_DURATION;
    constructor(yamlLanguageService: LanguageService, haConfig: HomeAssistantConfiguration, haConnection: HaConnection, definitionProviders: DefinitionProvider[], schemaServiceForIncludes: SchemaServiceForIncludes, sendDiagnostics: (fileUri: string, diagnostics: Diagnostic[]) => void, diagnoseAllFiles: () => void, configurationService: IConfigurationService);
    findAndApplySchemas: () => void;
    private getValidYamlTags;
    private onDocumentChangeDebounce;
    onDocumentChange: (document: TextDocument) => void;
    onDocumentOpen: (document: TextDocument) => Promise<void>;
    getDiagnostics: (document: TextDocument) => Promise<Diagnostic[]>;
    private validateEntityIds;
    private validateAreaIds;
    private validateDeviceIds;
    private validateFloorIds;
    private validateSecrets;
    private isInActionContext;
    private validateLabelIds;
    private validateActionIds;
    onDocumentSymbol: (document: TextDocument) => SymbolInformation[];
    onDocumentFormatting: (document: TextDocument, options: FormattingOptions) => Promise<TextEdit[]>;
    onCompletion: (textDocument: TextDocument, position: Position) => Promise<CompletionList>;
    onCompletionResolve: (completionItem: CompletionItem) => Promise<CompletionItem>;
    onHover: (document: TextDocument, position: Position) => Promise<Hover | null>;
    private isHoveringOverYamlKey;
    private getEntityHoverInfo;
    private getServiceHoverInfo;
    private getTemplateHoverInfo;
    private extractTemplateValue;
    private isTemplate;
    private renderTemplate;
    private isTemplateError;
    private formatTemplateError;
    private formatListString;
    private cleanErrorMessage;
    private getSyntaxHighlighting;
    private formatTemplateResult;
    private getTemplateValueRange;
    onDefinition: (textDocument: TextDocument, position: Position) => Promise<Definition | DefinitionLink[] | undefined>;
    private getSecretsCompletion;
    private getServiceAndEntityCompletions;
    private getUuidCompletions;
    private findAutoCompletionProperty;
}
//# sourceMappingURL=haLanguageService.d.ts.map